{"version":3,"sources":["images/binod.png","components/Avatar/avatar.module.css","../node_modules/express/lib sync","components/Navbar/MenuItem.js","components/Navbar/Navbar.js","components/Card/Card.jsx","components/Avatar/Avatar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","MenuItems","title","url","cName","Navbar","state","clicked","handleClick","setState","className","onClick","this","map","item","index","key","href","Component","Cards","Grid","container","spacing","justify","component","Card","CardContent","Typography","color","gutterBottom","variant","Avatar","src","Image","alt","App","Boolean","window","location","hostname","match","express","require","server","use","static","listen","process","PORT","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,mC,4HCC3CD,EAAOC,QAAU,CAAC,WAAW,2B,sHCD7B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BF,EAAOC,QAAUC,EACjBA,EAAoBO,GAAK,K,sYCRZC,EAAY,CACrB,CACIC,MAAO,OACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,SACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,WACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,YACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,SACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,YACPC,IAAI,IACJC,MAAM,aAEV,CACIF,MAAO,aACPC,IAAI,IACJC,MAAM,cCDCC,G,mNA5BXC,MAAQ,CAAEC,SAAS,G,EACnBC,YAAc,WACV,EAAKC,SAAS,CAACF,SAAU,EAAKD,MAAMC,W,uDAGpC,OACI,yBAAKG,UAAU,eACX,wBAAIA,UAAU,eAAd,mBAA4C,uBAAGA,UAAU,gBAAzD,KACA,yBAAKA,UAAU,YAAYC,QAASC,KAAKJ,aACrC,uBAAGE,UAAWE,KAAKN,MAAMC,QAAU,eAAiB,iBAExD,wBAAIG,UAAWE,KAAKN,MAAMC,QAAU,kBAAoB,YACnDN,EAAUY,KAAI,SAACC,EAAMC,GAClB,OACI,wBAAIC,IAAKD,GACL,uBAAGL,UAAWI,EAAKV,MAAOa,KAAMH,EAAKX,KAChCW,EAAKZ,iB,GAjBrBgB,c,oCC2CNC,EA5CD,WACV,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASb,UAAU,QACnD,kBAACU,EAAA,EAAD,CAAMN,MAAI,EAACU,UAAWC,KACvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,WACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKD,cAAY,GAArC,eACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQD,cAAY,GAAxC,kBAGH,kBAACT,EAAA,EAAD,CAAMN,MAAI,EAACU,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKD,cAAY,GAArC,eACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQD,cAAY,GAAxC,kBAGR,kBAACT,EAAA,EAAD,CAAMN,MAAI,EAACU,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKD,cAAY,GAArC,eACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQD,cAAY,GAAxC,kBAGR,kBAACT,EAAA,EAAD,CAAMN,MAAI,EAACU,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKD,cAAY,GAArC,eACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQD,cAAY,GAAxC,kBAGR,kBAACT,EAAA,EAAD,CAAMN,MAAI,EAACU,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKD,cAAY,GAArC,eACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,QAAQD,cAAY,GAAxC,qB,yBCtBRE,MAThB,WACI,OACA,6BACI,yBAAKrB,UAAU,WAAWsB,IAAKC,IAAOC,IAAI,UAC1C,gDCSOC,MAff,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACE,yBAAKA,UAAU,kBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACZ,kBAAC,EAAD,UCDK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAUC,EAAQ,KAClBC,EAASF,IAIbE,EAAOC,IAAI,IAAKH,EAAQI,OAAO,qBAHjB,CACZ9B,MAAO,gBAGT4B,EAAOG,OAAOC,mHAAYC,MAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8937e62c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/binod.c15f54bb.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"my-image\":\"avatar_my-image__1rbE4\"};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 276;","export const MenuItems = [\n    {\n        title: 'Home',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Skills',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Projects',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Education',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Resume',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Volunteer',\n        url:\"#\",\n        cName:'nav-links'\n    },\n    {\n        title: 'Contact me',\n        url:\"#\",\n        cName:'nav-links'\n    }\n]","import React, {Component} from \"react\";\nimport {MenuItems} from \"./MenuItem\";\nimport './Navbar.css'\n\nclass Navbar extends Component{\n    state = { clicked: false }\n    handleClick = () => {\n        this.setState({clicked: !this.state.clicked})\n    }\n    render() {\n        return(\n            <nav className=\"NavbarItems\">\n                <h1 className=\"navbar-logo\"> Binod Shrestha <i className=\"fas fa-user\"></i> </h1>\n                <div className=\"menu-icon\" onClick={this.handleClick}>\n                    <i className={this.state.clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\n                </div>\n                <ul className={this.state.clicked ? 'nav-menu active' : 'nav-menu'}>\n                    {MenuItems.map((item, index) => {\n                        return(\n                            <li key={index}>\n                                <a className={item.cName} href={item.url}>\n                                    {item.title}\n                                </a>\n                            </li>\n                        )\n                    })}\n\n                </ul>\n\n            </nav>\n        )\n    }\n}\nexport default Navbar\n","import React from 'react';\nimport {CardContent, Typography, Grid, Card} from \"@material-ui/core\";\n\nconst Cards = () => {\n    return(\n        <div >\n            <Grid container spacing={2} justify=\"center\" className=\"card\">\n                <Grid item component={Card}>\n               <CardContent>\n                   <Typography color=\"textSecondary\" gutterBottom>Project</Typography>\n                   <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                   <Typography variant=\"body2\" gutterBottom>Description:</Typography>\n               </CardContent>\n            </Grid>\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Skills</Typography>\n                        <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                        <Typography variant=\"body2\" gutterBottom>Description:</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Education</Typography>\n                        <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                        <Typography variant=\"body2\" gutterBottom>Description:</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Hackathon</Typography>\n                        <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                        <Typography variant=\"body2\" gutterBottom>Description:</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Resume</Typography>\n                        <Typography variant=\"h6\" gutterBottom>Description</Typography>\n                        <Typography variant=\"body2\" gutterBottom>Description:</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n\n        </div>\n    );\n}\nexport default Cards","import  React from 'react';\nimport Image from \"/Users/macowner/Documents/react-workspace/portfolio2021/src/images/binod.png\"\nimport './avatar.module.css'\n\n\n\n\n\nfunction Avatar() {\n    return (\n    <div>\n        <img className=\"my-image\" src={Image} alt=\"binod\"  />\n        <h1>Binod Shrestha</h1>\n    </div>\n\n    );\n}\nexport default  Avatar;","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Card from \"./components/Card/Card\"\nimport Avatar from \"./components/Avatar/Avatar\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n        <div className=\"grid-container\">\n            <Card ></Card>\n            <div className=\"profile\">\n               <Avatar />\n\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar express = require('express');\nvar server = express();\nvar options = {\n  index: 'index.html'\n};\nserver.use('/', express.static('/home/site/wwwroot', options));\nserver.listen(process.env.PORT);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}